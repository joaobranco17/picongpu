/**
 * Copyright 2013-2017 Axel Huebl, Rene Widera, Felix Schmitt,
 *                     Richard Pausch, Marco Garten
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "particles/densityProfiles/profiles.def"
/* preprocessor struct generator */
#include "preprocessor/struct.hpp"


namespace picongpu
{
namespace SI
{
    /** Base density in particles per m^3 in the density profiles.
     *
     * This is often taken as reference maximum density in normalized profiles.
     * Individual particle species can define a `densityRatio` flag relative
     * to this value.
     *
     * unit: ELEMENTS/m^3
     */
    constexpr float_64 BASE_DENSITY_SI = 1.e23;
}

namespace densityProfiles
{
    PMACC_STRUCT(LinearExponentialParam,
        /** height of vacuum area on top border
         *
         * this vacuum is important because of the laser initialization,
         * which is done in the first cells of the simulation and
         * assumes a charge-free volume
         * unit: cells
         */
        (PMACC_C_VALUE(uint32_t, vacuumCellsY, 1900))

        /** Y-Position where the linear slope ends and the exponential slope
         *  begins
         *  unit: meter
         */
        (PMACC_C_VALUE(float_64, gasYMax_SI, 2000 * 800.e-9/20.))

        /** Parameters for the linear slope:
         *  For Y <= gasYMax_SI:
         *    \rho / BASE_DENSITY = A * Y + B
         *                        = element [0.0; 1.0]
         *  unit for A: 1/m
         *  unit for B: none
         */
        (PMACC_C_VALUE(float_64, gasA_SI, 1.0 / 100.))

        /** Parameters for the exponential slope
         *  For Y > gasYMax_SI:
         *    let Y' = Y - gasYMax_SI
         *    \rho = exp[ - Y' * D ]
         *         = element [0.0; 1.0]
         *  unit: 1/m
         */
        (PMACC_C_VALUE(float_64, gasD_SI, 0.0e-3))

        (PMACC_C_VALUE(float_64, gasB, 0.0))
    ); /* struct LinearExponentialParam */

    /* definition of gas with linear start slop and exponential end slope */
    typedef LinearExponentialImpl<LinearExponentialParam> LinearExponential;

}

}
